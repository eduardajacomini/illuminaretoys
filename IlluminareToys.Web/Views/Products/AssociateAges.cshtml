@model AssociateAgesOutput

@{
    ViewData["Title"] = "Illuminare Toys - Associar Tdades";
    Layout = "~/Views/Shared/AdminLTE/_Layout.cshtml";

    var selectedAges = ViewBag.SelectedAges as IEnumerable<GetProductAgeOutput>;
}

<div class="col-md-12">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Associar Idades ao produto @Model.Product.Description</h3>
            <div class="card-tools">
                <a class="btn btn-primary" asp-action="Index">Voltar</a>
            </div>
        </div>
        <div class="card-body">
            <div class="ages-selects-container">
                @foreach (var age in Model.Ages)
                {
                    <div class="checkbox-wrapper-28">
                        <input id="@age.Id" 
                               type="checkbox" 
                               class="promoted-input-checkbox" 
                               onclick="changeAge('@age.Id')" 
                               @(selectedAges.Any(x => x.AgeId.Equals(age.Id)) ? "checked" : "")/>
                        <svg><use xlink:href="#checkmark-28" /></svg>
                        <label for="@age.Id">
                            @age.QuantityNormalized
                        </label>
                        <svg xmlns="http://www.w3.org/2000/svg" style="display: none">
                            <symbol id="checkmark-28" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-miterlimit="10" fill="none" d="M22.9 3.7l-15.2 16.6-6.6-7.1">
                                </path>
                            </symbol>
                        </svg>
                    </div>
                }
                <button class="btn btn-primary" type="button" onclick="saveChanges('@Model.Product.Id')">Salvar</button>
            </div>
        </div>
    </div>
</div>

<script>
    let agesChanges = [];

    $(document).ready(function () {
    });

    const changeAge = (ageId) => {

        var checkbox = document.getElementById(ageId);

        if (agesChanges.length > 0) {
            const otherChanges = agesChanges.filter(x => x.ageId !== ageId);

            agesChanges = [];

            otherChanges.push({
                ageId,
                isChecked: checkbox.checked
            })

            agesChanges.push(...otherChanges)

            return;
        }

        agesChanges.push({
            ageId,
            isChecked: checkbox.checked
        })
    }

    const saveChanges = (productId) => {
        if (agesChanges.length == 0) {
            showMessage('Ops...', 'Você não efetuou nenhuma mudança. Realize uma mudança para salvar!', 'warning');
            return;
        }

        axios.post('/Products/AssociateAges', {
            ProductId: productId,
            Ages: agesChanges
        }).then(_ => {
            location.reload()
        })
    }
</script>

<style>
    .checkbox-wrapper-28 {
        --size: 60px;
        position: relative;
    }

        .checkbox-wrapper-28 *,
        .checkbox-wrapper-28 *:before,
        .checkbox-wrapper-28 *:after {
            box-sizing: border-box;
        }

        .checkbox-wrapper-28 .promoted-input-checkbox {
            border: 0;
            clip: rect(0 0 0 0);
            height: 1px;
            margin: -1px;
            overflow: hidden;
            padding: 0;
            position: absolute;
            width: 1px;
        }

        .checkbox-wrapper-28 input:checked ~ svg {
            height: calc(var(--size) * 0.6);
            -webkit-animation: draw-checkbox-28 ease-in-out 0.2s forwards;
            animation: draw-checkbox-28 ease-in-out 0.2s forwards;
        }

        .checkbox-wrapper-28 label:active::after {
            background-color: #e6e6e6;
        }

        .checkbox-wrapper-28 label {
            color: #f2787b;
            line-height: var(--size);
            cursor: pointer;
            position: relative;
            font-size: var(--size);
        }

            .checkbox-wrapper-28 label:after {
                content: "";
                height: var(--size);
                width: var(--size);
                margin-right: 8px;
                float: left;
                border: 2px solid #f2787b;
                border-radius: 3px;
                transition: 0.15s all ease-out;
            }

        .checkbox-wrapper-28 svg {
            stroke: #f2787b;
            stroke-width: 3px;
            height: 0;
            width: calc(var(--size) * 0.6);
            position: absolute;
            left: calc(var(--size) * 0.21);
            top: calc(var(--size) * 0.2);
            stroke-dasharray: 33;
        }

    @@-webkit-keyframes draw-checkbox-28 {
        0% {
            stroke-dashoffset: 33;
        }

        100% {
            stroke-dashoffset: 0;
        }
    }

    @@keyframes draw-checkbox-28 {
        0% {
            stroke-dashoffset: 33;
        }

        100% {
            stroke-dashoffset: 0;
        }
    }
</style>
