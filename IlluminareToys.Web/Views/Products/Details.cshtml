@model GetProductOutput
@using IlluminareToys.Domain.Enums;

@{
    ViewData["Title"] = "Illuminare Toys - Detalhes";
    Layout = "~/Views/Shared/AdminLTE/_Layout.cshtml";
    int pageNumber = Convert.ToInt32(TempData["page"]);
}

<div class="col-md-12">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">@Model.Description</h3>
            <div class="card-tools">
                <a class="btn btn-primary" asp-action="AssociateTags" asp-route-productId="@Model.Id">Associar Tag</a>
                <a class="btn btn-primary" asp-action="Index" asp-route-page="@pageNumber">Voltar</a>
            </div>
        </div>
        <div class="card-body">
            <div id="product-container">
                @if (Model.ImageUrl is not null)
                {
                    <img class="card-img-top" src="@Model.ImageUrl" id="img-product" />
                }
                else
                {
                    <img id="img-product" src="~/img/no-image-available.jpg" class="card-img-top"/>
                }

                @if (User.IsInRole(Roles.Admin.ToString()))
                {
                    <form>
                        <div class="input-group">
                            <div class="custom-file">
                                <input type="file"
                                       accept=".png,.jpg,.jpeg"
                                       class="custom-file-input"
                                       id="input-image"
                                       onchange="addImage('@Model.Id')">
                                <label class="custom-file-label"
                                       for="input-image">Escolher imagem</label>
                            </div>
                        </div>
                    </form>
                }
                <h3>@Model.Code | @Model.Description | @Model.PriceFormatted</h3>
                <div class="badges-product-info">
                    @*<span class="badge bg-yellow">@Model.CategoryDescription</span>*@

                    @if (Model.State is "Ativo")
                    {
                        <span class="badge bg-green">@Model.State</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">@Model.State</span>
                    }
                </div>
                <div class="badges-product-tags">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-primary">@tag.Tag.Description</span>
                    }
                </div>
                <div class="share-button" onclick="onClickShareWhatsapp('@Model.ImageUrl', '@Model.Description', '@Model.PriceFormatted')">
                    <img src="~/img/whatsapp.svg" width="30" style="margin-right: 5px;" />
                    <span>Compartilhar no WhatsApp</span>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div id="div-subtitles">
                @*<div class="div-subtitle-square bg-yellow m-2"></div>
                    <span>Categoria</span>*@
                <div class="div-subtitle-square bg-primary m-2"></div>
                <span> Tag</span>
            </div>
        </div>
    </div>
</div>

<script>
    const addImage = (productId) => {
        showLoading();

        const file = $('#input-image')[0].files[0]

        var formData = new FormData();
        formData.append('file', file);

        axios.post(`/Products/Image/${productId}`, formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        }).then(_ => {
            location.reload()
        })
    }

    const onClickShareWhatsapp = (imageUrl, productDescription, productPrice) => {
        const title = "Compartilhar o produto pelo WhatsApp";
        const inputLabel = "Informe o WhatsApp do cliente. Ex: 66 9999-9999";
        const inputValidator = (value) => {
            if (!value) {
                return 'Você precisa informar um número de telefone!'
            }
            const phoneNumber = formatPhone(`${value}`);
            const finalPhoneNumber = `+55 ${phoneNumber}`

            var regExp = /\+\d{2}\s\(\d{2}\)\s\d{4,5}-?\d{4}/g;
            var isValid = regExp.test(finalPhoneNumber);

            if (!isValid) {
                return 'Informe o número de telefone corretamente.'
            }
        };
        const handleResult = (result) => {
            if (!result.isConfirmed) {
                return;
            }

            const phoneNumber = formatPhone(`${result.value}`);
            const finalPhoneNumber = `+55 ${phoneNumber}`
            const phoneOnlyNumbers = onlyNumbers(finalPhoneNumber);


            const whatsappMessage = `Olá! Estou te enviando mais informações sobre o produto *${productDescription}*. Preço: ${productPrice} | Foto: ${imageUrl}`;
            const whatsappLink = `https://api.whatsapp.com/send?phone=${phoneOnlyNumbers}&text=${whatsappMessage}`;

            window.open(encodeURI(whatsappLink), '_blank');
        }

        showDialogWithInput(title, inputLabel, inputValidator, handleResult);
    }

    const formatPhone = (v) => {
        v = v.replace(/\D/g, "");             //Remove tudo o que não é dígito
        v = v.replace(/^(\d{2})(\d)/g, "($1) $2"); //Coloca parênteses em volta dos dois primeiros dígitos
        v = v.replace(/(\d)(\d{4})$/, "$1-$2");    //Coloca hífen entre o quarto e o quinto dígitos
        return v;
    }

    const onlyNumbers = (value) => value.replace(/\D/g, "");
</script>

<style>
    .share-options {
        flex-direction: column;
    }

    .share-button {
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0 0 2px #888;
        text-align: center;
        margin-top: 24px;
        width: 60%;
        background-color: #24cc63;
    }

        .share-button:hover {
            cursor: pointer;
            opacity: 0.7;
        }

    #div-subtitles {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: start;
    }

    .div-subtitle-square {
        height: 15px;
        width: 15px;
    }

    #product-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    #img-product {
        width: 200px;
        height: 200px;
    }

    #badges-product-info {
        flex-direction: row;
    }

    #badges-product-tags {
        flex-direction: row;
    }
</style>